// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 30010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 30010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace core {
class AuthenticationReq;
class AuthenticationReqDefaultTypeInternal;
extern AuthenticationReqDefaultTypeInternal _AuthenticationReq_default_instance_;
class AuthenticationResp;
class AuthenticationRespDefaultTypeInternal;
extern AuthenticationRespDefaultTypeInternal _AuthenticationResp_default_instance_;
class Heartbeat;
class HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class HeartbeatAck;
class HeartbeatAckDefaultTypeInternal;
extern HeartbeatAckDefaultTypeInternal _HeartbeatAck_default_instance_;
class Jid;
class JidDefaultTypeInternal;
extern JidDefaultTypeInternal _Jid_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> ::core::AuthenticationReq* Arena::CreateMaybeMessage<::core::AuthenticationReq>(Arena*);
template<> ::core::AuthenticationResp* Arena::CreateMaybeMessage<::core::AuthenticationResp>(Arena*);
template<> ::core::Heartbeat* Arena::CreateMaybeMessage<::core::Heartbeat>(Arena*);
template<> ::core::HeartbeatAck* Arena::CreateMaybeMessage<::core::HeartbeatAck>(Arena*);
template<> ::core::Jid* Arena::CreateMaybeMessage<::core::Jid>(Arena*);
template<> ::core::Response* Arena::CreateMaybeMessage<::core::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace core {

enum AuthenticationReq_ResourceType : int {
  AuthenticationReq_ResourceType_WINPC = 0,
  AuthenticationReq_ResourceType_ANDROID = 1,
  AuthenticationReq_ResourceType_IPHONE = 2,
  AuthenticationReq_ResourceType_IPAD = 3
};
bool AuthenticationReq_ResourceType_IsValid(int value);
constexpr AuthenticationReq_ResourceType AuthenticationReq_ResourceType_ResourceType_MIN = AuthenticationReq_ResourceType_WINPC;
constexpr AuthenticationReq_ResourceType AuthenticationReq_ResourceType_ResourceType_MAX = AuthenticationReq_ResourceType_IPAD;
constexpr int AuthenticationReq_ResourceType_ResourceType_ARRAYSIZE = AuthenticationReq_ResourceType_ResourceType_MAX + 1;

const std::string& AuthenticationReq_ResourceType_Name(AuthenticationReq_ResourceType value);
template<typename T>
inline const std::string& AuthenticationReq_ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticationReq_ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticationReq_ResourceType_Name.");
  return AuthenticationReq_ResourceType_Name(static_cast<AuthenticationReq_ResourceType>(enum_t_value));
}
bool AuthenticationReq_ResourceType_Parse(
    const std::string& name, AuthenticationReq_ResourceType* value);
// ===================================================================

class Jid :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.Jid) */ {
 public:
  Jid();
  virtual ~Jid();

  Jid(const Jid& from);
  Jid(Jid&& from) noexcept
    : Jid() {
    *this = ::std::move(from);
  }

  inline Jid& operator=(const Jid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Jid& operator=(Jid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Jid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jid* internal_default_instance() {
    return reinterpret_cast<const Jid*>(
               &_Jid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Jid& a, Jid& b) {
    a.Swap(&b);
  }
  inline void Swap(Jid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Jid* New() const final {
    return CreateMaybeMessage<Jid>(nullptr);
  }

  Jid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Jid>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Jid& from);
  void MergeFrom(const Jid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Jid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.Jid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDomainFieldNumber = 2,
    kResourceFieldNumber = 3,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string domain = 2;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional string resource = 3;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // @@protoc_insertion_point(class_scope:core.Jid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationReq :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.AuthenticationReq) */ {
 public:
  AuthenticationReq();
  virtual ~AuthenticationReq();

  AuthenticationReq(const AuthenticationReq& from);
  AuthenticationReq(AuthenticationReq&& from) noexcept
    : AuthenticationReq() {
    *this = ::std::move(from);
  }

  inline AuthenticationReq& operator=(const AuthenticationReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationReq& operator=(AuthenticationReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthenticationReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticationReq* internal_default_instance() {
    return reinterpret_cast<const AuthenticationReq*>(
               &_AuthenticationReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthenticationReq& a, AuthenticationReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationReq* New() const final {
    return CreateMaybeMessage<AuthenticationReq>(nullptr);
  }

  AuthenticationReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AuthenticationReq& from);
  void MergeFrom(const AuthenticationReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticationReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.AuthenticationReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AuthenticationReq_ResourceType ResourceType;
  static constexpr ResourceType WINPC =
    AuthenticationReq_ResourceType_WINPC;
  static constexpr ResourceType ANDROID =
    AuthenticationReq_ResourceType_ANDROID;
  static constexpr ResourceType IPHONE =
    AuthenticationReq_ResourceType_IPHONE;
  static constexpr ResourceType IPAD =
    AuthenticationReq_ResourceType_IPAD;
  static inline bool ResourceType_IsValid(int value) {
    return AuthenticationReq_ResourceType_IsValid(value);
  }
  static constexpr ResourceType ResourceType_MIN =
    AuthenticationReq_ResourceType_ResourceType_MIN;
  static constexpr ResourceType ResourceType_MAX =
    AuthenticationReq_ResourceType_ResourceType_MAX;
  static constexpr int ResourceType_ARRAYSIZE =
    AuthenticationReq_ResourceType_ResourceType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ResourceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResourceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResourceType_Name.");
    return AuthenticationReq_ResourceType_Name(enum_t_value);
  }
  static inline bool ResourceType_Parse(const std::string& name,
      ResourceType* value) {
    return AuthenticationReq_ResourceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kResourceNameFieldNumber = 4,
    kJidFieldNumber = 1,
    kResourceTypeFieldNumber = 3,
  };
  // optional string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string resourceName = 4;
  bool has_resourcename() const;
  private:
  bool _internal_has_resourcename() const;
  public:
  void clear_resourcename();
  const std::string& resourcename() const;
  void set_resourcename(const std::string& value);
  void set_resourcename(std::string&& value);
  void set_resourcename(const char* value);
  void set_resourcename(const char* value, size_t size);
  std::string* mutable_resourcename();
  std::string* release_resourcename();
  void set_allocated_resourcename(std::string* resourcename);
  private:
  const std::string& _internal_resourcename() const;
  void _internal_set_resourcename(const std::string& value);
  std::string* _internal_mutable_resourcename();
  public:

  // required .core.Jid jid = 1;
  bool has_jid() const;
  private:
  bool _internal_has_jid() const;
  public:
  void clear_jid();
  const ::core::Jid& jid() const;
  ::core::Jid* release_jid();
  ::core::Jid* mutable_jid();
  void set_allocated_jid(::core::Jid* jid);
  private:
  const ::core::Jid& _internal_jid() const;
  ::core::Jid* _internal_mutable_jid();
  public:

  // optional .core.AuthenticationReq.ResourceType resourceType = 3 [default = WINPC];
  bool has_resourcetype() const;
  private:
  bool _internal_has_resourcetype() const;
  public:
  void clear_resourcetype();
  ::core::AuthenticationReq_ResourceType resourcetype() const;
  void set_resourcetype(::core::AuthenticationReq_ResourceType value);
  private:
  ::core::AuthenticationReq_ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::core::AuthenticationReq_ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:core.AuthenticationReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourcename_;
  ::core::Jid* jid_;
  int resourcetype_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCauseFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string cause = 2;
  bool has_cause() const;
  private:
  bool _internal_has_cause() const;
  public:
  void clear_cause();
  const std::string& cause() const;
  void set_cause(const std::string& value);
  void set_cause(std::string&& value);
  void set_cause(const char* value);
  void set_cause(const char* value, size_t size);
  std::string* mutable_cause();
  std::string* release_cause();
  void set_allocated_cause(std::string* cause);
  private:
  const std::string& _internal_cause() const;
  void _internal_set_cause(const std::string& value);
  std::string* _internal_mutable_cause();
  public:

  // required int32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:core.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cause_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationResp :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.AuthenticationResp) */ {
 public:
  AuthenticationResp();
  virtual ~AuthenticationResp();

  AuthenticationResp(const AuthenticationResp& from);
  AuthenticationResp(AuthenticationResp&& from) noexcept
    : AuthenticationResp() {
    *this = ::std::move(from);
  }

  inline AuthenticationResp& operator=(const AuthenticationResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationResp& operator=(AuthenticationResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthenticationResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticationResp* internal_default_instance() {
    return reinterpret_cast<const AuthenticationResp*>(
               &_AuthenticationResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticationResp& a, AuthenticationResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationResp* New() const final {
    return CreateMaybeMessage<AuthenticationResp>(nullptr);
  }

  AuthenticationResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationResp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AuthenticationResp& from);
  void MergeFrom(const AuthenticationResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticationResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.AuthenticationResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRespFieldNumber = 1,
    kFullJidFieldNumber = 3,
  };
  // required .core.Response resp = 1;
  bool has_resp() const;
  private:
  bool _internal_has_resp() const;
  public:
  void clear_resp();
  const ::core::Response& resp() const;
  ::core::Response* release_resp();
  ::core::Response* mutable_resp();
  void set_allocated_resp(::core::Response* resp);
  private:
  const ::core::Response& _internal_resp() const;
  ::core::Response* _internal_mutable_resp();
  public:

  // optional .core.Jid fullJid = 3;
  bool has_fulljid() const;
  private:
  bool _internal_has_fulljid() const;
  public:
  void clear_fulljid();
  const ::core::Jid& fulljid() const;
  ::core::Jid* release_fulljid();
  ::core::Jid* mutable_fulljid();
  void set_allocated_fulljid(::core::Jid* fulljid);
  private:
  const ::core::Jid& _internal_fulljid() const;
  ::core::Jid* _internal_mutable_fulljid();
  public:

  // @@protoc_insertion_point(class_scope:core.AuthenticationResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::core::Response* resp_;
  ::core::Jid* fulljid_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Heartbeat :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.Heartbeat) */ {
 public:
  Heartbeat();
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Heartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const final {
    return CreateMaybeMessage<Heartbeat>(nullptr);
  }

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.Heartbeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:core.Heartbeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatAck :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.HeartbeatAck) */ {
 public:
  HeartbeatAck();
  virtual ~HeartbeatAck();

  HeartbeatAck(const HeartbeatAck& from);
  HeartbeatAck(HeartbeatAck&& from) noexcept
    : HeartbeatAck() {
    *this = ::std::move(from);
  }

  inline HeartbeatAck& operator=(const HeartbeatAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatAck& operator=(HeartbeatAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HeartbeatAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatAck* internal_default_instance() {
    return reinterpret_cast<const HeartbeatAck*>(
               &_HeartbeatAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HeartbeatAck& a, HeartbeatAck& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatAck* New() const final {
    return CreateMaybeMessage<HeartbeatAck>(nullptr);
  }

  HeartbeatAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HeartbeatAck& from);
  void MergeFrom(const HeartbeatAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartbeatAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.HeartbeatAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromJidFieldNumber = 1,
  };
  // required .core.Jid fromJid = 1;
  bool has_fromjid() const;
  private:
  bool _internal_has_fromjid() const;
  public:
  void clear_fromjid();
  const ::core::Jid& fromjid() const;
  ::core::Jid* release_fromjid();
  ::core::Jid* mutable_fromjid();
  void set_allocated_fromjid(::core::Jid* fromjid);
  private:
  const ::core::Jid& _internal_fromjid() const;
  ::core::Jid* _internal_mutable_fromjid();
  public:

  // @@protoc_insertion_point(class_scope:core.HeartbeatAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::core::Jid* fromjid_;
  friend struct ::TableStruct_core_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Jid

// required string id = 1;
inline bool Jid::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Jid::has_id() const {
  return _internal_has_id();
}
inline void Jid::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Jid::id() const {
  // @@protoc_insertion_point(field_get:core.Jid.id)
  return _internal_id();
}
inline void Jid::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:core.Jid.id)
}
inline std::string* Jid::mutable_id() {
  // @@protoc_insertion_point(field_mutable:core.Jid.id)
  return _internal_mutable_id();
}
inline const std::string& Jid::_internal_id() const {
  return id_.GetNoArena();
}
inline void Jid::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Jid::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.Jid.id)
}
inline void Jid::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.Jid.id)
}
inline void Jid::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.Jid.id)
}
inline std::string* Jid::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Jid::release_id() {
  // @@protoc_insertion_point(field_release:core.Jid.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Jid::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:core.Jid.id)
}

// optional string domain = 2;
inline bool Jid::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Jid::has_domain() const {
  return _internal_has_domain();
}
inline void Jid::clear_domain() {
  domain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Jid::domain() const {
  // @@protoc_insertion_point(field_get:core.Jid.domain)
  return _internal_domain();
}
inline void Jid::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:core.Jid.domain)
}
inline std::string* Jid::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:core.Jid.domain)
  return _internal_mutable_domain();
}
inline const std::string& Jid::_internal_domain() const {
  return domain_.GetNoArena();
}
inline void Jid::_internal_set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Jid::set_domain(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  domain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.Jid.domain)
}
inline void Jid::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.Jid.domain)
}
inline void Jid::set_domain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.Jid.domain)
}
inline std::string* Jid::_internal_mutable_domain() {
  _has_bits_[0] |= 0x00000002u;
  return domain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Jid::release_domain() {
  // @@protoc_insertion_point(field_release:core.Jid.domain)
  if (!has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return domain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Jid::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  domain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:core.Jid.domain)
}

// optional string resource = 3;
inline bool Jid::_internal_has_resource() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Jid::has_resource() const {
  return _internal_has_resource();
}
inline void Jid::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Jid::resource() const {
  // @@protoc_insertion_point(field_get:core.Jid.resource)
  return _internal_resource();
}
inline void Jid::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:core.Jid.resource)
}
inline std::string* Jid::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:core.Jid.resource)
  return _internal_mutable_resource();
}
inline const std::string& Jid::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void Jid::_internal_set_resource(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Jid::set_resource(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.Jid.resource)
}
inline void Jid::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.Jid.resource)
}
inline void Jid::set_resource(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.Jid.resource)
}
inline std::string* Jid::_internal_mutable_resource() {
  _has_bits_[0] |= 0x00000004u;
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Jid::release_resource() {
  // @@protoc_insertion_point(field_release:core.Jid.resource)
  if (!has_resource()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return resource_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Jid::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:core.Jid.resource)
}

// -------------------------------------------------------------------

// AuthenticationReq

// required .core.Jid jid = 1;
inline bool AuthenticationReq::_internal_has_jid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || jid_ != nullptr);
  return value;
}
inline bool AuthenticationReq::has_jid() const {
  return _internal_has_jid();
}
inline void AuthenticationReq::clear_jid() {
  if (jid_ != nullptr) jid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::core::Jid& AuthenticationReq::_internal_jid() const {
  const ::core::Jid* p = jid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::core::Jid*>(
      &::core::_Jid_default_instance_);
}
inline const ::core::Jid& AuthenticationReq::jid() const {
  // @@protoc_insertion_point(field_get:core.AuthenticationReq.jid)
  return _internal_jid();
}
inline ::core::Jid* AuthenticationReq::release_jid() {
  // @@protoc_insertion_point(field_release:core.AuthenticationReq.jid)
  _has_bits_[0] &= ~0x00000004u;
  ::core::Jid* temp = jid_;
  jid_ = nullptr;
  return temp;
}
inline ::core::Jid* AuthenticationReq::_internal_mutable_jid() {
  _has_bits_[0] |= 0x00000004u;
  if (jid_ == nullptr) {
    auto* p = CreateMaybeMessage<::core::Jid>(GetArenaNoVirtual());
    jid_ = p;
  }
  return jid_;
}
inline ::core::Jid* AuthenticationReq::mutable_jid() {
  // @@protoc_insertion_point(field_mutable:core.AuthenticationReq.jid)
  return _internal_mutable_jid();
}
inline void AuthenticationReq::set_allocated_jid(::core::Jid* jid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete jid_;
  }
  if (jid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      jid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  jid_ = jid;
  // @@protoc_insertion_point(field_set_allocated:core.AuthenticationReq.jid)
}

// optional string password = 2;
inline bool AuthenticationReq::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticationReq::has_password() const {
  return _internal_has_password();
}
inline void AuthenticationReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticationReq::password() const {
  // @@protoc_insertion_point(field_get:core.AuthenticationReq.password)
  return _internal_password();
}
inline void AuthenticationReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:core.AuthenticationReq.password)
}
inline std::string* AuthenticationReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:core.AuthenticationReq.password)
  return _internal_mutable_password();
}
inline const std::string& AuthenticationReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void AuthenticationReq::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticationReq::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.AuthenticationReq.password)
}
inline void AuthenticationReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.AuthenticationReq.password)
}
inline void AuthenticationReq::set_password(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.AuthenticationReq.password)
}
inline std::string* AuthenticationReq::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticationReq::release_password() {
  // @@protoc_insertion_point(field_release:core.AuthenticationReq.password)
  if (!has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticationReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:core.AuthenticationReq.password)
}

// optional .core.AuthenticationReq.ResourceType resourceType = 3 [default = WINPC];
inline bool AuthenticationReq::_internal_has_resourcetype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthenticationReq::has_resourcetype() const {
  return _internal_has_resourcetype();
}
inline void AuthenticationReq::clear_resourcetype() {
  resourcetype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::core::AuthenticationReq_ResourceType AuthenticationReq::_internal_resourcetype() const {
  return static_cast< ::core::AuthenticationReq_ResourceType >(resourcetype_);
}
inline ::core::AuthenticationReq_ResourceType AuthenticationReq::resourcetype() const {
  // @@protoc_insertion_point(field_get:core.AuthenticationReq.resourceType)
  return _internal_resourcetype();
}
inline void AuthenticationReq::_internal_set_resourcetype(::core::AuthenticationReq_ResourceType value) {
  assert(::core::AuthenticationReq_ResourceType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  resourcetype_ = value;
}
inline void AuthenticationReq::set_resourcetype(::core::AuthenticationReq_ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:core.AuthenticationReq.resourceType)
}

// optional string resourceName = 4;
inline bool AuthenticationReq::_internal_has_resourcename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticationReq::has_resourcename() const {
  return _internal_has_resourcename();
}
inline void AuthenticationReq::clear_resourcename() {
  resourcename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticationReq::resourcename() const {
  // @@protoc_insertion_point(field_get:core.AuthenticationReq.resourceName)
  return _internal_resourcename();
}
inline void AuthenticationReq::set_resourcename(const std::string& value) {
  _internal_set_resourcename(value);
  // @@protoc_insertion_point(field_set:core.AuthenticationReq.resourceName)
}
inline std::string* AuthenticationReq::mutable_resourcename() {
  // @@protoc_insertion_point(field_mutable:core.AuthenticationReq.resourceName)
  return _internal_mutable_resourcename();
}
inline const std::string& AuthenticationReq::_internal_resourcename() const {
  return resourcename_.GetNoArena();
}
inline void AuthenticationReq::_internal_set_resourcename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  resourcename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticationReq::set_resourcename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  resourcename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.AuthenticationReq.resourceName)
}
inline void AuthenticationReq::set_resourcename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  resourcename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.AuthenticationReq.resourceName)
}
inline void AuthenticationReq::set_resourcename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  resourcename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.AuthenticationReq.resourceName)
}
inline std::string* AuthenticationReq::_internal_mutable_resourcename() {
  _has_bits_[0] |= 0x00000002u;
  return resourcename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticationReq::release_resourcename() {
  // @@protoc_insertion_point(field_release:core.AuthenticationReq.resourceName)
  if (!has_resourcename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return resourcename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticationReq::set_allocated_resourcename(std::string* resourcename) {
  if (resourcename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  resourcename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resourcename);
  // @@protoc_insertion_point(field_set_allocated:core.AuthenticationReq.resourceName)
}

// -------------------------------------------------------------------

// Response

// required int32 status = 1;
inline bool Response::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response::has_status() const {
  return _internal_has_status();
}
inline void Response::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::status() const {
  // @@protoc_insertion_point(field_get:core.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void Response::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:core.Response.status)
}

// optional string cause = 2;
inline bool Response::_internal_has_cause() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_cause() const {
  return _internal_has_cause();
}
inline void Response::clear_cause() {
  cause_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::cause() const {
  // @@protoc_insertion_point(field_get:core.Response.cause)
  return _internal_cause();
}
inline void Response::set_cause(const std::string& value) {
  _internal_set_cause(value);
  // @@protoc_insertion_point(field_set:core.Response.cause)
}
inline std::string* Response::mutable_cause() {
  // @@protoc_insertion_point(field_mutable:core.Response.cause)
  return _internal_mutable_cause();
}
inline const std::string& Response::_internal_cause() const {
  return cause_.GetNoArena();
}
inline void Response::_internal_set_cause(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cause_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_cause(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cause_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.Response.cause)
}
inline void Response::set_cause(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cause_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.Response.cause)
}
inline void Response::set_cause(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cause_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.Response.cause)
}
inline std::string* Response::_internal_mutable_cause() {
  _has_bits_[0] |= 0x00000001u;
  return cause_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_cause() {
  // @@protoc_insertion_point(field_release:core.Response.cause)
  if (!has_cause()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cause_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_cause(std::string* cause) {
  if (cause != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cause_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cause);
  // @@protoc_insertion_point(field_set_allocated:core.Response.cause)
}

// -------------------------------------------------------------------

// AuthenticationResp

// required .core.Response resp = 1;
inline bool AuthenticationResp::_internal_has_resp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || resp_ != nullptr);
  return value;
}
inline bool AuthenticationResp::has_resp() const {
  return _internal_has_resp();
}
inline void AuthenticationResp::clear_resp() {
  if (resp_ != nullptr) resp_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::core::Response& AuthenticationResp::_internal_resp() const {
  const ::core::Response* p = resp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::core::Response*>(
      &::core::_Response_default_instance_);
}
inline const ::core::Response& AuthenticationResp::resp() const {
  // @@protoc_insertion_point(field_get:core.AuthenticationResp.resp)
  return _internal_resp();
}
inline ::core::Response* AuthenticationResp::release_resp() {
  // @@protoc_insertion_point(field_release:core.AuthenticationResp.resp)
  _has_bits_[0] &= ~0x00000001u;
  ::core::Response* temp = resp_;
  resp_ = nullptr;
  return temp;
}
inline ::core::Response* AuthenticationResp::_internal_mutable_resp() {
  _has_bits_[0] |= 0x00000001u;
  if (resp_ == nullptr) {
    auto* p = CreateMaybeMessage<::core::Response>(GetArenaNoVirtual());
    resp_ = p;
  }
  return resp_;
}
inline ::core::Response* AuthenticationResp::mutable_resp() {
  // @@protoc_insertion_point(field_mutable:core.AuthenticationResp.resp)
  return _internal_mutable_resp();
}
inline void AuthenticationResp::set_allocated_resp(::core::Response* resp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resp_;
  }
  if (resp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:core.AuthenticationResp.resp)
}

// optional .core.Jid fullJid = 3;
inline bool AuthenticationResp::_internal_has_fulljid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || fulljid_ != nullptr);
  return value;
}
inline bool AuthenticationResp::has_fulljid() const {
  return _internal_has_fulljid();
}
inline void AuthenticationResp::clear_fulljid() {
  if (fulljid_ != nullptr) fulljid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::core::Jid& AuthenticationResp::_internal_fulljid() const {
  const ::core::Jid* p = fulljid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::core::Jid*>(
      &::core::_Jid_default_instance_);
}
inline const ::core::Jid& AuthenticationResp::fulljid() const {
  // @@protoc_insertion_point(field_get:core.AuthenticationResp.fullJid)
  return _internal_fulljid();
}
inline ::core::Jid* AuthenticationResp::release_fulljid() {
  // @@protoc_insertion_point(field_release:core.AuthenticationResp.fullJid)
  _has_bits_[0] &= ~0x00000002u;
  ::core::Jid* temp = fulljid_;
  fulljid_ = nullptr;
  return temp;
}
inline ::core::Jid* AuthenticationResp::_internal_mutable_fulljid() {
  _has_bits_[0] |= 0x00000002u;
  if (fulljid_ == nullptr) {
    auto* p = CreateMaybeMessage<::core::Jid>(GetArenaNoVirtual());
    fulljid_ = p;
  }
  return fulljid_;
}
inline ::core::Jid* AuthenticationResp::mutable_fulljid() {
  // @@protoc_insertion_point(field_mutable:core.AuthenticationResp.fullJid)
  return _internal_mutable_fulljid();
}
inline void AuthenticationResp::set_allocated_fulljid(::core::Jid* fulljid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fulljid_;
  }
  if (fulljid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fulljid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fulljid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fulljid_ = fulljid;
  // @@protoc_insertion_point(field_set_allocated:core.AuthenticationResp.fullJid)
}

// -------------------------------------------------------------------

// Heartbeat

// -------------------------------------------------------------------

// HeartbeatAck

// required .core.Jid fromJid = 1;
inline bool HeartbeatAck::_internal_has_fromjid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fromjid_ != nullptr);
  return value;
}
inline bool HeartbeatAck::has_fromjid() const {
  return _internal_has_fromjid();
}
inline void HeartbeatAck::clear_fromjid() {
  if (fromjid_ != nullptr) fromjid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::core::Jid& HeartbeatAck::_internal_fromjid() const {
  const ::core::Jid* p = fromjid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::core::Jid*>(
      &::core::_Jid_default_instance_);
}
inline const ::core::Jid& HeartbeatAck::fromjid() const {
  // @@protoc_insertion_point(field_get:core.HeartbeatAck.fromJid)
  return _internal_fromjid();
}
inline ::core::Jid* HeartbeatAck::release_fromjid() {
  // @@protoc_insertion_point(field_release:core.HeartbeatAck.fromJid)
  _has_bits_[0] &= ~0x00000001u;
  ::core::Jid* temp = fromjid_;
  fromjid_ = nullptr;
  return temp;
}
inline ::core::Jid* HeartbeatAck::_internal_mutable_fromjid() {
  _has_bits_[0] |= 0x00000001u;
  if (fromjid_ == nullptr) {
    auto* p = CreateMaybeMessage<::core::Jid>(GetArenaNoVirtual());
    fromjid_ = p;
  }
  return fromjid_;
}
inline ::core::Jid* HeartbeatAck::mutable_fromjid() {
  // @@protoc_insertion_point(field_mutable:core.HeartbeatAck.fromJid)
  return _internal_mutable_fromjid();
}
inline void HeartbeatAck::set_allocated_fromjid(::core::Jid* fromjid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fromjid_;
  }
  if (fromjid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fromjid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromjid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fromjid_ = fromjid;
  // @@protoc_insertion_point(field_set_allocated:core.HeartbeatAck.fromJid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::core::AuthenticationReq_ResourceType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2eproto
