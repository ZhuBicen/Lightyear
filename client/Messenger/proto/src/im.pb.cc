// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace im {

void protobuf_ShutdownFile_im_2eproto() {
  delete Presence::default_instance_;
  delete RosterReq::default_instance_;
  delete RosterItem::default_instance_;
  delete RosterResp::default_instance_;
  delete PresenceReq::default_instance_;
  delete PresenceResp::default_instance_;
  delete MessageElement::default_instance_;
  delete ChatMessage::default_instance_;
  delete AlertMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::core::protobuf_AddDesc_core_2eproto();
  Presence::default_instance_ = new Presence();
  RosterReq::default_instance_ = new RosterReq();
  RosterItem::default_instance_ = new RosterItem();
  RosterResp::default_instance_ = new RosterResp();
  PresenceReq::default_instance_ = new PresenceReq();
  PresenceResp::default_instance_ = new PresenceResp();
  MessageElement::default_instance_ = new MessageElement();
  ChatMessage::default_instance_ = new ChatMessage();
  AlertMessage::default_instance_ = new AlertMessage();
  Presence::default_instance_->InitAsDefaultInstance();
  RosterReq::default_instance_->InitAsDefaultInstance();
  RosterItem::default_instance_->InitAsDefaultInstance();
  RosterResp::default_instance_->InitAsDefaultInstance();
  PresenceReq::default_instance_->InitAsDefaultInstance();
  PresenceResp::default_instance_->InitAsDefaultInstance();
  MessageElement::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  AlertMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_2eproto_once_);
void protobuf_AddDesc_im_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_2eproto_once_,
                 &protobuf_AddDesc_im_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2eproto {
  StaticDescriptorInitializer_im_2eproto() {
    protobuf_AddDesc_im_2eproto();
  }
} static_descriptor_initializer_im_2eproto_;
#endif
bool EnumMessageElement_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

bool Presence_Show_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Presence_Show Presence::ONLINE;
const Presence_Show Presence::OFFLINE;
const Presence_Show Presence::AWAY;
const Presence_Show Presence::Show_MIN;
const Presence_Show Presence::Show_MAX;
const int Presence::Show_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Presence::kFromJidFieldNumber;
const int Presence::kToJidFieldNumber;
const int Presence::kPriorityFieldNumber;
const int Presence::kShowFieldNumber;
const int Presence::kStatusFieldNumber;
#endif  // !_MSC_VER

Presence::Presence()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.Presence)
}

void Presence::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fromjid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  fromjid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tojid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  tojid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
}

Presence::Presence(const Presence& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.Presence)
}

void Presence::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromjid_ = NULL;
  tojid_ = NULL;
  priority_ = 0;
  show_ = 0;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Presence::~Presence() {
  // @@protoc_insertion_point(destructor:im.Presence)
  SharedDtor();
}

void Presence::SharedDtor() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fromjid_;
    delete tojid_;
  }
}

void Presence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Presence& Presence::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

Presence* Presence::default_instance_ = NULL;

Presence* Presence::New() const {
  return new Presence;
}

void Presence::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Presence*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(priority_, show_);
    if (has_fromjid()) {
      if (fromjid_ != NULL) fromjid_->::core::Jid::Clear();
    }
    if (has_tojid()) {
      if (tojid_ != NULL) tojid_->::core::Jid::Clear();
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        status_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Presence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:im.Presence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .core.Jid fromJid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromjid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_toJid;
        break;
      }

      // optional .core.Jid toJid = 2;
      case 2: {
        if (tag == 18) {
         parse_toJid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tojid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_show;
        break;
      }

      // optional .im.Presence.Show show = 5;
      case 5: {
        if (tag == 40) {
         parse_show:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::Presence_Show_IsValid(value)) {
            set_show(static_cast< ::im::Presence_Show >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_status;
        break;
      }

      // optional string status = 6;
      case 6: {
        if (tag == 50) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.Presence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.Presence)
  return false;
#undef DO_
}

void Presence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.Presence)
  // optional .core.Jid fromJid = 1;
  if (has_fromjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->fromjid(), output);
  }

  // optional .core.Jid toJid = 2;
  if (has_tojid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->tojid(), output);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // optional .im.Presence.Show show = 5;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->show(), output);
  }

  // optional string status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:im.Presence)
}

int Presence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .core.Jid fromJid = 1;
    if (has_fromjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromjid());
    }

    // optional .core.Jid toJid = 2;
    if (has_tojid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tojid());
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional .im.Presence.Show show = 5;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->show());
    }

    // optional string status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Presence::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Presence*>(&from));
}

void Presence::MergeFrom(const Presence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromjid()) {
      mutable_fromjid()->::core::Jid::MergeFrom(from.fromjid());
    }
    if (from.has_tojid()) {
      mutable_tojid()->::core::Jid::MergeFrom(from.tojid());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Presence::CopyFrom(const Presence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Presence::IsInitialized() const {

  if (has_fromjid()) {
    if (!this->fromjid().IsInitialized()) return false;
  }
  if (has_tojid()) {
    if (!this->tojid().IsInitialized()) return false;
  }
  return true;
}

void Presence::Swap(Presence* other) {
  if (other != this) {
    std::swap(fromjid_, other->fromjid_);
    std::swap(tojid_, other->tojid_);
    std::swap(priority_, other->priority_);
    std::swap(show_, other->show_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Presence::GetTypeName() const {
  return "im.Presence";
}


// ===================================================================

#ifndef _MSC_VER
const int RosterReq::kJidFieldNumber;
#endif  // !_MSC_VER

RosterReq::RosterReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.RosterReq)
}

void RosterReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  jid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  jid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
}

RosterReq::RosterReq(const RosterReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.RosterReq)
}

void RosterReq::SharedCtor() {
  _cached_size_ = 0;
  jid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RosterReq::~RosterReq() {
  // @@protoc_insertion_point(destructor:im.RosterReq)
  SharedDtor();
}

void RosterReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete jid_;
  }
}

void RosterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RosterReq& RosterReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

RosterReq* RosterReq::default_instance_ = NULL;

RosterReq* RosterReq::New() const {
  return new RosterReq;
}

void RosterReq::Clear() {
  if (has_jid()) {
    if (jid_ != NULL) jid_->::core::Jid::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RosterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:im.RosterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .core.Jid jid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.RosterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.RosterReq)
  return false;
#undef DO_
}

void RosterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.RosterReq)
  // required .core.Jid jid = 1;
  if (has_jid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->jid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:im.RosterReq)
}

int RosterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .core.Jid jid = 1;
    if (has_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RosterReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RosterReq*>(&from));
}

void RosterReq::MergeFrom(const RosterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jid()) {
      mutable_jid()->::core::Jid::MergeFrom(from.jid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RosterReq::CopyFrom(const RosterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RosterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_jid()) {
    if (!this->jid().IsInitialized()) return false;
  }
  return true;
}

void RosterReq::Swap(RosterReq* other) {
  if (other != this) {
    std::swap(jid_, other->jid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RosterReq::GetTypeName() const {
  return "im.RosterReq";
}


// ===================================================================

#ifndef _MSC_VER
const int RosterItem::kJidFieldNumber;
const int RosterItem::kOnlineStatusFieldNumber;
const int RosterItem::kNameFieldNumber;
const int RosterItem::kNicknameFieldNumber;
const int RosterItem::kDescriptionFieldNumber;
const int RosterItem::kPositionFieldNumber;
const int RosterItem::kDepartmentFieldNumber;
const int RosterItem::kGroupTagFieldNumber;
#endif  // !_MSC_VER

RosterItem::RosterItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.RosterItem)
}

void RosterItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  jid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  jid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
}

RosterItem::RosterItem(const RosterItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.RosterItem)
}

void RosterItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  jid_ = NULL;
  onlinestatus_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RosterItem::~RosterItem() {
  // @@protoc_insertion_point(destructor:im.RosterItem)
  SharedDtor();
}

void RosterItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete department_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete jid_;
  }
}

void RosterItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RosterItem& RosterItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

RosterItem* RosterItem::default_instance_ = NULL;

RosterItem* RosterItem::New() const {
  return new RosterItem;
}

void RosterItem::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_jid()) {
      if (jid_ != NULL) jid_->::core::Jid::Clear();
    }
    onlinestatus_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        department_->clear();
      }
    }
  }
  grouptag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RosterItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:im.RosterItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .core.Jid jid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_onlineStatus;
        break;
      }

      // required int32 onlineStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_onlineStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinestatus_)));
          set_has_onlinestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_position;
        break;
      }

      // optional string position = 6;
      case 6: {
        if (tag == 50) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_department;
        break;
      }

      // optional string department = 7;
      case 7: {
        if (tag == 58) {
         parse_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_department()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_groupTag;
        break;
      }

      // repeated string groupTag = 8;
      case 8: {
        if (tag == 66) {
         parse_groupTag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_grouptag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_groupTag;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.RosterItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.RosterItem)
  return false;
#undef DO_
}

void RosterItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.RosterItem)
  // required .core.Jid jid = 1;
  if (has_jid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->jid(), output);
  }

  // required int32 onlineStatus = 2;
  if (has_onlinestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onlinestatus(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional string position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->position(), output);
  }

  // optional string department = 7;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->department(), output);
  }

  // repeated string groupTag = 8;
  for (int i = 0; i < this->grouptag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->grouptag(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:im.RosterItem)
}

int RosterItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .core.Jid jid = 1;
    if (has_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jid());
    }

    // required int32 onlineStatus = 2;
    if (has_onlinestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinestatus());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional string department = 7;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->department());
    }

  }
  // repeated string groupTag = 8;
  total_size += 1 * this->grouptag_size();
  for (int i = 0; i < this->grouptag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->grouptag(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RosterItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RosterItem*>(&from));
}

void RosterItem::MergeFrom(const RosterItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  grouptag_.MergeFrom(from.grouptag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jid()) {
      mutable_jid()->::core::Jid::MergeFrom(from.jid());
    }
    if (from.has_onlinestatus()) {
      set_onlinestatus(from.onlinestatus());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RosterItem::CopyFrom(const RosterItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RosterItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_jid()) {
    if (!this->jid().IsInitialized()) return false;
  }
  return true;
}

void RosterItem::Swap(RosterItem* other) {
  if (other != this) {
    std::swap(jid_, other->jid_);
    std::swap(onlinestatus_, other->onlinestatus_);
    std::swap(name_, other->name_);
    std::swap(nickname_, other->nickname_);
    std::swap(description_, other->description_);
    std::swap(position_, other->position_);
    std::swap(department_, other->department_);
    grouptag_.Swap(&other->grouptag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RosterItem::GetTypeName() const {
  return "im.RosterItem";
}


// ===================================================================

#ifndef _MSC_VER
const int RosterResp::kRosterItemsFieldNumber;
#endif  // !_MSC_VER

RosterResp::RosterResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.RosterResp)
}

void RosterResp::InitAsDefaultInstance() {
}

RosterResp::RosterResp(const RosterResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.RosterResp)
}

void RosterResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RosterResp::~RosterResp() {
  // @@protoc_insertion_point(destructor:im.RosterResp)
  SharedDtor();
}

void RosterResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RosterResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RosterResp& RosterResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

RosterResp* RosterResp::default_instance_ = NULL;

RosterResp* RosterResp::New() const {
  return new RosterResp;
}

void RosterResp::Clear() {
  rosteritems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RosterResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:im.RosterResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .im.RosterItem rosterItems = 1;
      case 1: {
        if (tag == 10) {
         parse_rosterItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rosteritems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rosterItems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.RosterResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.RosterResp)
  return false;
#undef DO_
}

void RosterResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.RosterResp)
  // repeated .im.RosterItem rosterItems = 1;
  for (int i = 0; i < this->rosteritems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rosteritems(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:im.RosterResp)
}

int RosterResp::ByteSize() const {
  int total_size = 0;

  // repeated .im.RosterItem rosterItems = 1;
  total_size += 1 * this->rosteritems_size();
  for (int i = 0; i < this->rosteritems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rosteritems(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RosterResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RosterResp*>(&from));
}

void RosterResp::MergeFrom(const RosterResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rosteritems_.MergeFrom(from.rosteritems_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RosterResp::CopyFrom(const RosterResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RosterResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rosteritems())) return false;
  return true;
}

void RosterResp::Swap(RosterResp* other) {
  if (other != this) {
    rosteritems_.Swap(&other->rosteritems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RosterResp::GetTypeName() const {
  return "im.RosterResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PresenceReq::kJidFieldNumber;
#endif  // !_MSC_VER

PresenceReq::PresenceReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.PresenceReq)
}

void PresenceReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  jid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  jid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
}

PresenceReq::PresenceReq(const PresenceReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.PresenceReq)
}

void PresenceReq::SharedCtor() {
  _cached_size_ = 0;
  jid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PresenceReq::~PresenceReq() {
  // @@protoc_insertion_point(destructor:im.PresenceReq)
  SharedDtor();
}

void PresenceReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete jid_;
  }
}

void PresenceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PresenceReq& PresenceReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

PresenceReq* PresenceReq::default_instance_ = NULL;

PresenceReq* PresenceReq::New() const {
  return new PresenceReq;
}

void PresenceReq::Clear() {
  if (has_jid()) {
    if (jid_ != NULL) jid_->::core::Jid::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PresenceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:im.PresenceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .core.Jid jid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.PresenceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.PresenceReq)
  return false;
#undef DO_
}

void PresenceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.PresenceReq)
  // required .core.Jid jid = 1;
  if (has_jid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->jid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:im.PresenceReq)
}

int PresenceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .core.Jid jid = 1;
    if (has_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PresenceReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PresenceReq*>(&from));
}

void PresenceReq::MergeFrom(const PresenceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jid()) {
      mutable_jid()->::core::Jid::MergeFrom(from.jid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PresenceReq::CopyFrom(const PresenceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_jid()) {
    if (!this->jid().IsInitialized()) return false;
  }
  return true;
}

void PresenceReq::Swap(PresenceReq* other) {
  if (other != this) {
    std::swap(jid_, other->jid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PresenceReq::GetTypeName() const {
  return "im.PresenceReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PresenceResp::kJidsFieldNumber;
#endif  // !_MSC_VER

PresenceResp::PresenceResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.PresenceResp)
}

void PresenceResp::InitAsDefaultInstance() {
}

PresenceResp::PresenceResp(const PresenceResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.PresenceResp)
}

void PresenceResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PresenceResp::~PresenceResp() {
  // @@protoc_insertion_point(destructor:im.PresenceResp)
  SharedDtor();
}

void PresenceResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PresenceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PresenceResp& PresenceResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

PresenceResp* PresenceResp::default_instance_ = NULL;

PresenceResp* PresenceResp::New() const {
  return new PresenceResp;
}

void PresenceResp::Clear() {
  jids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PresenceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:im.PresenceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .core.Jid jids = 1;
      case 1: {
        if (tag == 10) {
         parse_jids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_jids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.PresenceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.PresenceResp)
  return false;
#undef DO_
}

void PresenceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.PresenceResp)
  // repeated .core.Jid jids = 1;
  for (int i = 0; i < this->jids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->jids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:im.PresenceResp)
}

int PresenceResp::ByteSize() const {
  int total_size = 0;

  // repeated .core.Jid jids = 1;
  total_size += 1 * this->jids_size();
  for (int i = 0; i < this->jids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jids(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PresenceResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PresenceResp*>(&from));
}

void PresenceResp::MergeFrom(const PresenceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  jids_.MergeFrom(from.jids_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PresenceResp::CopyFrom(const PresenceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenceResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->jids())) return false;
  return true;
}

void PresenceResp::Swap(PresenceResp* other) {
  if (other != this) {
    jids_.Swap(&other->jids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PresenceResp::GetTypeName() const {
  return "im.PresenceResp";
}


// ===================================================================

#ifndef _MSC_VER
const int MessageElement::kKindFieldNumber;
const int MessageElement::kDataFieldNumber;
#endif  // !_MSC_VER

MessageElement::MessageElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.MessageElement)
}

void MessageElement::InitAsDefaultInstance() {
}

MessageElement::MessageElement(const MessageElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.MessageElement)
}

void MessageElement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kind_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageElement::~MessageElement() {
  // @@protoc_insertion_point(destructor:im.MessageElement)
  SharedDtor();
}

void MessageElement::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessageElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageElement& MessageElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

MessageElement* MessageElement::default_instance_ = NULL;

MessageElement* MessageElement::New() const {
  return new MessageElement;
}

void MessageElement::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    kind_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MessageElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:im.MessageElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .im.EnumMessageElement kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::EnumMessageElement_IsValid(value)) {
            set_kind(static_cast< ::im::EnumMessageElement >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.MessageElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.MessageElement)
  return false;
#undef DO_
}

void MessageElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.MessageElement)
  // required .im.EnumMessageElement kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:im.MessageElement)
}

int MessageElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .im.EnumMessageElement kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageElement*>(&from));
}

void MessageElement::MergeFrom(const MessageElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MessageElement::CopyFrom(const MessageElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageElement::Swap(MessageElement* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessageElement::GetTypeName() const {
  return "im.MessageElement";
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessage::kFromJidFieldNumber;
const int ChatMessage::kToJidFieldNumber;
const int ChatMessage::kBodyFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fromjid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  fromjid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tojid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  tojid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.ChatMessage)
}

void ChatMessage::SharedCtor() {
  _cached_size_ = 0;
  fromjid_ = NULL;
  tojid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:im.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fromjid_;
    delete tojid_;
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChatMessage& ChatMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New() const {
  return new ChatMessage;
}

void ChatMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fromjid()) {
      if (fromjid_ != NULL) fromjid_->::core::Jid::Clear();
    }
    if (has_tojid()) {
      if (tojid_ != NULL) tojid_->::core::Jid::Clear();
    }
  }
  body_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:im.ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .core.Jid fromJid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromjid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_toJid;
        break;
      }

      // required .core.Jid toJid = 2;
      case 2: {
        if (tag == 18) {
         parse_toJid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tojid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // repeated .im.MessageElement body = 3;
      case 3: {
        if (tag == 26) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_body;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.ChatMessage)
  // required .core.Jid fromJid = 1;
  if (has_fromjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->fromjid(), output);
  }

  // required .core.Jid toJid = 2;
  if (has_tojid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->tojid(), output);
  }

  // repeated .im.MessageElement body = 3;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->body(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:im.ChatMessage)
}

int ChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .core.Jid fromJid = 1;
    if (has_fromjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromjid());
    }

    // required .core.Jid toJid = 2;
    if (has_tojid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tojid());
    }

  }
  // repeated .im.MessageElement body = 3;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatMessage*>(&from));
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  body_.MergeFrom(from.body_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromjid()) {
      mutable_fromjid()->::core::Jid::MergeFrom(from.fromjid());
    }
    if (from.has_tojid()) {
      mutable_tojid()->::core::Jid::MergeFrom(from.tojid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_fromjid()) {
    if (!this->fromjid().IsInitialized()) return false;
  }
  if (has_tojid()) {
    if (!this->tojid().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->body())) return false;
  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other != this) {
    std::swap(fromjid_, other->fromjid_);
    std::swap(tojid_, other->tojid_);
    body_.Swap(&other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChatMessage::GetTypeName() const {
  return "im.ChatMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AlertMessage::kBodyFieldNumber;
#endif  // !_MSC_VER

AlertMessage::AlertMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.AlertMessage)
}

void AlertMessage::InitAsDefaultInstance() {
}

AlertMessage::AlertMessage(const AlertMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.AlertMessage)
}

void AlertMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlertMessage::~AlertMessage() {
  // @@protoc_insertion_point(destructor:im.AlertMessage)
  SharedDtor();
}

void AlertMessage::SharedDtor() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AlertMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AlertMessage& AlertMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
#endif
  return *default_instance_;
}

AlertMessage* AlertMessage::default_instance_ = NULL;

AlertMessage* AlertMessage::New() const {
  return new AlertMessage;
}

void AlertMessage::Clear() {
  if (has_body()) {
    if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      body_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AlertMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:im.AlertMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string body = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.AlertMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.AlertMessage)
  return false;
#undef DO_
}

void AlertMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.AlertMessage)
  // required string body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->body(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:im.AlertMessage)
}

int AlertMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AlertMessage*>(&from));
}

void AlertMessage::MergeFrom(const AlertMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AlertMessage::CopyFrom(const AlertMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AlertMessage::Swap(AlertMessage* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AlertMessage::GetTypeName() const {
  return "im.AlertMessage";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)
