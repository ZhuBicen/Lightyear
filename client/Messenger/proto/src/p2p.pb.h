// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_p2p_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_p2p_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 30010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 30010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "core.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_p2p_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_p2p_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace p2p {
class JingleMessage;
class JingleMessageDefaultTypeInternal;
extern JingleMessageDefaultTypeInternal _JingleMessage_default_instance_;
}  // namespace p2p
PROTOBUF_NAMESPACE_OPEN
template<> ::p2p::JingleMessage* Arena::CreateMaybeMessage<::p2p::JingleMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace p2p {

// ===================================================================

class JingleMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:p2p.JingleMessage) */ {
 public:
  JingleMessage();
  virtual ~JingleMessage();

  JingleMessage(const JingleMessage& from);
  JingleMessage(JingleMessage&& from) noexcept
    : JingleMessage() {
    *this = ::std::move(from);
  }

  inline JingleMessage& operator=(const JingleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline JingleMessage& operator=(JingleMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const JingleMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JingleMessage* internal_default_instance() {
    return reinterpret_cast<const JingleMessage*>(
               &_JingleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JingleMessage& a, JingleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(JingleMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JingleMessage* New() const final {
    return CreateMaybeMessage<JingleMessage>(nullptr);
  }

  JingleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JingleMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const JingleMessage& from);
  void MergeFrom(const JingleMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JingleMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p2p.JingleMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kFromJidFieldNumber = 1,
    kToJidFieldNumber = 2,
  };
  // required string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // required .core.Jid fromJid = 1;
  bool has_fromjid() const;
  private:
  bool _internal_has_fromjid() const;
  public:
  void clear_fromjid();
  const ::core::Jid& fromjid() const;
  ::core::Jid* release_fromjid();
  ::core::Jid* mutable_fromjid();
  void set_allocated_fromjid(::core::Jid* fromjid);
  private:
  const ::core::Jid& _internal_fromjid() const;
  ::core::Jid* _internal_mutable_fromjid();
  public:

  // required .core.Jid toJid = 2;
  bool has_tojid() const;
  private:
  bool _internal_has_tojid() const;
  public:
  void clear_tojid();
  const ::core::Jid& tojid() const;
  ::core::Jid* release_tojid();
  ::core::Jid* mutable_tojid();
  void set_allocated_tojid(::core::Jid* tojid);
  private:
  const ::core::Jid& _internal_tojid() const;
  ::core::Jid* _internal_mutable_tojid();
  public:

  // @@protoc_insertion_point(class_scope:p2p.JingleMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::core::Jid* fromjid_;
  ::core::Jid* tojid_;
  friend struct ::TableStruct_p2p_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JingleMessage

// required .core.Jid fromJid = 1;
inline bool JingleMessage::_internal_has_fromjid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || fromjid_ != nullptr);
  return value;
}
inline bool JingleMessage::has_fromjid() const {
  return _internal_has_fromjid();
}
inline const ::core::Jid& JingleMessage::_internal_fromjid() const {
  const ::core::Jid* p = fromjid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::core::Jid*>(
      &::core::_Jid_default_instance_);
}
inline const ::core::Jid& JingleMessage::fromjid() const {
  // @@protoc_insertion_point(field_get:p2p.JingleMessage.fromJid)
  return _internal_fromjid();
}
inline ::core::Jid* JingleMessage::release_fromjid() {
  // @@protoc_insertion_point(field_release:p2p.JingleMessage.fromJid)
  _has_bits_[0] &= ~0x00000002u;
  ::core::Jid* temp = fromjid_;
  fromjid_ = nullptr;
  return temp;
}
inline ::core::Jid* JingleMessage::_internal_mutable_fromjid() {
  _has_bits_[0] |= 0x00000002u;
  if (fromjid_ == nullptr) {
    auto* p = CreateMaybeMessage<::core::Jid>(GetArenaNoVirtual());
    fromjid_ = p;
  }
  return fromjid_;
}
inline ::core::Jid* JingleMessage::mutable_fromjid() {
  // @@protoc_insertion_point(field_mutable:p2p.JingleMessage.fromJid)
  return _internal_mutable_fromjid();
}
inline void JingleMessage::set_allocated_fromjid(::core::Jid* fromjid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fromjid_);
  }
  if (fromjid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fromjid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromjid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fromjid_ = fromjid;
  // @@protoc_insertion_point(field_set_allocated:p2p.JingleMessage.fromJid)
}

// required .core.Jid toJid = 2;
inline bool JingleMessage::_internal_has_tojid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tojid_ != nullptr);
  return value;
}
inline bool JingleMessage::has_tojid() const {
  return _internal_has_tojid();
}
inline const ::core::Jid& JingleMessage::_internal_tojid() const {
  const ::core::Jid* p = tojid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::core::Jid*>(
      &::core::_Jid_default_instance_);
}
inline const ::core::Jid& JingleMessage::tojid() const {
  // @@protoc_insertion_point(field_get:p2p.JingleMessage.toJid)
  return _internal_tojid();
}
inline ::core::Jid* JingleMessage::release_tojid() {
  // @@protoc_insertion_point(field_release:p2p.JingleMessage.toJid)
  _has_bits_[0] &= ~0x00000004u;
  ::core::Jid* temp = tojid_;
  tojid_ = nullptr;
  return temp;
}
inline ::core::Jid* JingleMessage::_internal_mutable_tojid() {
  _has_bits_[0] |= 0x00000004u;
  if (tojid_ == nullptr) {
    auto* p = CreateMaybeMessage<::core::Jid>(GetArenaNoVirtual());
    tojid_ = p;
  }
  return tojid_;
}
inline ::core::Jid* JingleMessage::mutable_tojid() {
  // @@protoc_insertion_point(field_mutable:p2p.JingleMessage.toJid)
  return _internal_mutable_tojid();
}
inline void JingleMessage::set_allocated_tojid(::core::Jid* tojid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tojid_);
  }
  if (tojid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tojid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tojid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tojid_ = tojid;
  // @@protoc_insertion_point(field_set_allocated:p2p.JingleMessage.toJid)
}

// required string content = 3;
inline bool JingleMessage::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JingleMessage::has_content() const {
  return _internal_has_content();
}
inline void JingleMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JingleMessage::content() const {
  // @@protoc_insertion_point(field_get:p2p.JingleMessage.content)
  return _internal_content();
}
inline void JingleMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:p2p.JingleMessage.content)
}
inline std::string* JingleMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:p2p.JingleMessage.content)
  return _internal_mutable_content();
}
inline const std::string& JingleMessage::_internal_content() const {
  return content_.GetNoArena();
}
inline void JingleMessage::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JingleMessage::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.JingleMessage.content)
}
inline void JingleMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.JingleMessage.content)
}
inline void JingleMessage::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.JingleMessage.content)
}
inline std::string* JingleMessage::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JingleMessage::release_content() {
  // @@protoc_insertion_point(field_release:p2p.JingleMessage.content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JingleMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:p2p.JingleMessage.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_p2p_2eproto
