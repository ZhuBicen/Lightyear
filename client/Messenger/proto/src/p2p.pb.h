// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#ifndef PROTOBUF_p2p_2eproto__INCLUDED
#define PROTOBUF_p2p_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "core.pb.h"
// @@protoc_insertion_point(includes)

namespace p2p {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_p2p_2eproto();
void protobuf_AssignDesc_p2p_2eproto();
void protobuf_ShutdownFile_p2p_2eproto();

class JingleMessage;

// ===================================================================

class JingleMessage : public ::google::protobuf::MessageLite {
 public:
  JingleMessage();
  virtual ~JingleMessage();

  JingleMessage(const JingleMessage& from);

  inline JingleMessage& operator=(const JingleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const JingleMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const JingleMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(JingleMessage* other);

  // implements Message ----------------------------------------------

  JingleMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const JingleMessage& from);
  void MergeFrom(const JingleMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .core.Jid fromJid = 1;
  inline bool has_fromjid() const;
  inline void clear_fromjid();
  static const int kFromJidFieldNumber = 1;
  inline const ::core::Jid& fromjid() const;
  inline ::core::Jid* mutable_fromjid();
  inline ::core::Jid* release_fromjid();
  inline void set_allocated_fromjid(::core::Jid* fromjid);

  // required .core.Jid toJid = 2;
  inline bool has_tojid() const;
  inline void clear_tojid();
  static const int kToJidFieldNumber = 2;
  inline const ::core::Jid& tojid() const;
  inline ::core::Jid* mutable_tojid();
  inline ::core::Jid* release_tojid();
  inline void set_allocated_tojid(::core::Jid* tojid);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:p2p.JingleMessage)
 private:
  inline void set_has_fromjid();
  inline void clear_has_fromjid();
  inline void set_has_tojid();
  inline void clear_has_tojid();
  inline void set_has_content();
  inline void clear_has_content();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::core::Jid* fromjid_;
  ::core::Jid* tojid_;
  ::std::string* content_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_p2p_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_p2p_2eproto();
  #endif
  friend void protobuf_AssignDesc_p2p_2eproto();
  friend void protobuf_ShutdownFile_p2p_2eproto();

  void InitAsDefaultInstance();
  static JingleMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// JingleMessage

// required .core.Jid fromJid = 1;
inline bool JingleMessage::has_fromjid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JingleMessage::set_has_fromjid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JingleMessage::clear_has_fromjid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JingleMessage::clear_fromjid() {
  if (fromjid_ != NULL) fromjid_->::core::Jid::Clear();
  clear_has_fromjid();
}
inline const ::core::Jid& JingleMessage::fromjid() const {
  // @@protoc_insertion_point(field_get:p2p.JingleMessage.fromJid)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return fromjid_ != NULL ? *fromjid_ : *default_instance().fromjid_;
#else
  return fromjid_ != NULL ? *fromjid_ : *default_instance_->fromjid_;
#endif
}
inline ::core::Jid* JingleMessage::mutable_fromjid() {
  set_has_fromjid();
  if (fromjid_ == NULL) fromjid_ = new ::core::Jid;
  // @@protoc_insertion_point(field_mutable:p2p.JingleMessage.fromJid)
  return fromjid_;
}
inline ::core::Jid* JingleMessage::release_fromjid() {
  clear_has_fromjid();
  ::core::Jid* temp = fromjid_;
  fromjid_ = NULL;
  return temp;
}
inline void JingleMessage::set_allocated_fromjid(::core::Jid* fromjid) {
  delete fromjid_;
  fromjid_ = fromjid;
  if (fromjid) {
    set_has_fromjid();
  } else {
    clear_has_fromjid();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.JingleMessage.fromJid)
}

// required .core.Jid toJid = 2;
inline bool JingleMessage::has_tojid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JingleMessage::set_has_tojid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JingleMessage::clear_has_tojid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JingleMessage::clear_tojid() {
  if (tojid_ != NULL) tojid_->::core::Jid::Clear();
  clear_has_tojid();
}
inline const ::core::Jid& JingleMessage::tojid() const {
  // @@protoc_insertion_point(field_get:p2p.JingleMessage.toJid)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return tojid_ != NULL ? *tojid_ : *default_instance().tojid_;
#else
  return tojid_ != NULL ? *tojid_ : *default_instance_->tojid_;
#endif
}
inline ::core::Jid* JingleMessage::mutable_tojid() {
  set_has_tojid();
  if (tojid_ == NULL) tojid_ = new ::core::Jid;
  // @@protoc_insertion_point(field_mutable:p2p.JingleMessage.toJid)
  return tojid_;
}
inline ::core::Jid* JingleMessage::release_tojid() {
  clear_has_tojid();
  ::core::Jid* temp = tojid_;
  tojid_ = NULL;
  return temp;
}
inline void JingleMessage::set_allocated_tojid(::core::Jid* tojid) {
  delete tojid_;
  tojid_ = tojid;
  if (tojid) {
    set_has_tojid();
  } else {
    clear_has_tojid();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.JingleMessage.toJid)
}

// required string content = 3;
inline bool JingleMessage::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JingleMessage::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JingleMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JingleMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& JingleMessage::content() const {
  // @@protoc_insertion_point(field_get:p2p.JingleMessage.content)
  return *content_;
}
inline void JingleMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:p2p.JingleMessage.content)
}
inline void JingleMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:p2p.JingleMessage.content)
}
inline void JingleMessage::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p2p.JingleMessage.content)
}
inline ::std::string* JingleMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:p2p.JingleMessage.content)
  return content_;
}
inline ::std::string* JingleMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JingleMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.JingleMessage.content)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_p2p_2eproto__INCLUDED
