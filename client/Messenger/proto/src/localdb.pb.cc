// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localdb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "localdb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace localdb {

void protobuf_ShutdownFile_localdb_2eproto() {
  delete UserProfile::default_instance_;
  delete Config::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_localdb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_localdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::im::protobuf_AddDesc_im_2eproto();
  UserProfile::default_instance_ = new UserProfile();
  Config::default_instance_ = new Config();
  UserProfile::default_instance_->InitAsDefaultInstance();
  Config::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_localdb_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_localdb_2eproto_once_);
void protobuf_AddDesc_localdb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_localdb_2eproto_once_,
                 &protobuf_AddDesc_localdb_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_localdb_2eproto {
  StaticDescriptorInitializer_localdb_2eproto() {
    protobuf_AddDesc_localdb_2eproto();
  }
} static_descriptor_initializer_localdb_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int UserProfile::kIdFieldNumber;
const int UserProfile::kPwFieldNumber;
const int UserProfile::kAutoSigninFieldNumber;
const int UserProfile::kThemeFieldNumber;
const int UserProfile::kRecentContactsFieldNumber;
const int UserProfile::kChatMessagesFieldNumber;
#endif  // !_MSC_VER

UserProfile::UserProfile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:localdb.UserProfile)
}

void UserProfile::InitAsDefaultInstance() {
}

UserProfile::UserProfile(const UserProfile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:localdb.UserProfile)
}

void UserProfile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autosignin_ = false;
  theme_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserProfile::~UserProfile() {
  // @@protoc_insertion_point(destructor:localdb.UserProfile)
  SharedDtor();
}

void UserProfile::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pw_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserProfile& UserProfile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_localdb_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_localdb_2eproto();
#endif
  return *default_instance_;
}

UserProfile* UserProfile::default_instance_ = NULL;

UserProfile* UserProfile::New() const {
  return new UserProfile;
}

void UserProfile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserProfile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(autosignin_, theme_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_pw()) {
      if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pw_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  recentcontacts_.Clear();
  chatmessages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:localdb.UserProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pw;
        break;
      }

      // optional string pw = 2;
      case 2: {
        if (tag == 18) {
         parse_pw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_autoSignin;
        break;
      }

      // optional bool autoSignin = 3;
      case 3: {
        if (tag == 24) {
         parse_autoSignin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autosignin_)));
          set_has_autosignin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_theme;
        break;
      }

      // optional int32 theme = 4;
      case 4: {
        if (tag == 32) {
         parse_theme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &theme_)));
          set_has_theme();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recentContacts;
        break;
      }

      // repeated string recentContacts = 5;
      case 5: {
        if (tag == 42) {
         parse_recentContacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recentcontacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recentContacts;
        if (input->ExpectTag(50)) goto parse_chatMessages;
        break;
      }

      // repeated .im.ChatMessage chatMessages = 6;
      case 6: {
        if (tag == 50) {
         parse_chatMessages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatmessages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_chatMessages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:localdb.UserProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:localdb.UserProfile)
  return false;
#undef DO_
}

void UserProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:localdb.UserProfile)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string pw = 2;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pw(), output);
  }

  // optional bool autoSignin = 3;
  if (has_autosignin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autosignin(), output);
  }

  // optional int32 theme = 4;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->theme(), output);
  }

  // repeated string recentContacts = 5;
  for (int i = 0; i < this->recentcontacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->recentcontacts(i), output);
  }

  // repeated .im.ChatMessage chatMessages = 6;
  for (int i = 0; i < this->chatmessages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->chatmessages(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:localdb.UserProfile)
}

int UserProfile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string pw = 2;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pw());
    }

    // optional bool autoSignin = 3;
    if (has_autosignin()) {
      total_size += 1 + 1;
    }

    // optional int32 theme = 4;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->theme());
    }

  }
  // repeated string recentContacts = 5;
  total_size += 1 * this->recentcontacts_size();
  for (int i = 0; i < this->recentcontacts_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recentcontacts(i));
  }

  // repeated .im.ChatMessage chatMessages = 6;
  total_size += 1 * this->chatmessages_size();
  for (int i = 0; i < this->chatmessages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatmessages(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserProfile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserProfile*>(&from));
}

void UserProfile::MergeFrom(const UserProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  recentcontacts_.MergeFrom(from.recentcontacts_);
  chatmessages_.MergeFrom(from.chatmessages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
    if (from.has_autosignin()) {
      set_autosignin(from.autosignin());
    }
    if (from.has_theme()) {
      set_theme(from.theme());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserProfile::CopyFrom(const UserProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfile::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->chatmessages())) return false;
  return true;
}

void UserProfile::Swap(UserProfile* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pw_, other->pw_);
    std::swap(autosignin_, other->autosignin_);
    std::swap(theme_, other->theme_);
    recentcontacts_.Swap(&other->recentcontacts_);
    chatmessages_.Swap(&other->chatmessages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserProfile::GetTypeName() const {
  return "localdb.UserProfile";
}


// ===================================================================

#ifndef _MSC_VER
const int Config::kProfilesFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:localdb.Config)
}

void Config::InitAsDefaultInstance() {
}

Config::Config(const Config& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:localdb.Config)
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:localdb.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Config& Config::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_localdb_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_localdb_2eproto();
#endif
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  profiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:localdb.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .localdb.UserProfile profiles = 1;
      case 1: {
        if (tag == 10) {
         parse_profiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_profiles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_profiles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:localdb.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:localdb.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:localdb.Config)
  // repeated .localdb.UserProfile profiles = 1;
  for (int i = 0; i < this->profiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->profiles(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:localdb.Config)
}

int Config::ByteSize() const {
  int total_size = 0;

  // repeated .localdb.UserProfile profiles = 1;
  total_size += 1 * this->profiles_size();
  for (int i = 0; i < this->profiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->profiles(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Config*>(&from));
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  profiles_.MergeFrom(from.profiles_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->profiles())) return false;
  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    profiles_.Swap(&other->profiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Config::GetTypeName() const {
  return "localdb.Config";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace localdb

// @@protoc_insertion_point(global_scope)
