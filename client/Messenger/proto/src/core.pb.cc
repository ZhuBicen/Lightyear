// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace core {

void protobuf_ShutdownFile_core_2eproto() {
  delete Jid::default_instance_;
  delete AuthenticationReq::default_instance_;
  delete Response::default_instance_;
  delete AuthenticationResp::default_instance_;
  delete Heartbeat::default_instance_;
  delete HeartbeatAck::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_core_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_core_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Jid::default_instance_ = new Jid();
  AuthenticationReq::default_instance_ = new AuthenticationReq();
  Response::default_instance_ = new Response();
  AuthenticationResp::default_instance_ = new AuthenticationResp();
  Heartbeat::default_instance_ = new Heartbeat();
  HeartbeatAck::default_instance_ = new HeartbeatAck();
  Jid::default_instance_->InitAsDefaultInstance();
  AuthenticationReq::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  AuthenticationResp::default_instance_->InitAsDefaultInstance();
  Heartbeat::default_instance_->InitAsDefaultInstance();
  HeartbeatAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_core_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_core_2eproto_once_);
void protobuf_AddDesc_core_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_core_2eproto_once_,
                 &protobuf_AddDesc_core_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_core_2eproto {
  StaticDescriptorInitializer_core_2eproto() {
    protobuf_AddDesc_core_2eproto();
  }
} static_descriptor_initializer_core_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Jid::kIdFieldNumber;
const int Jid::kDomainFieldNumber;
const int Jid::kResourceFieldNumber;
#endif  // !_MSC_VER

Jid::Jid()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.Jid)
}

void Jid::InitAsDefaultInstance() {
}

Jid::Jid(const Jid& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:core.Jid)
}

void Jid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Jid::~Jid() {
  // @@protoc_insertion_point(destructor:core.Jid)
  SharedDtor();
}

void Jid::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Jid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Jid& Jid::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_core_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
#endif
  return *default_instance_;
}

Jid* Jid::default_instance_ = NULL;

Jid* Jid::New() const {
  return new Jid;
}

void Jid::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Jid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:core.Jid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (tag == 18) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional string resource = 3;
      case 3: {
        if (tag == 26) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.Jid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.Jid)
  return false;
#undef DO_
}

void Jid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.Jid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resource(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:core.Jid)
}

int Jid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Jid::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Jid*>(&from));
}

void Jid::MergeFrom(const Jid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Jid::CopyFrom(const Jid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Jid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Jid::Swap(Jid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(domain_, other->domain_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Jid::GetTypeName() const {
  return "core.Jid";
}


// ===================================================================

bool AuthenticationReq_ResourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AuthenticationReq_ResourceType AuthenticationReq::WINPC;
const AuthenticationReq_ResourceType AuthenticationReq::ANDROID;
const AuthenticationReq_ResourceType AuthenticationReq::IPHONE;
const AuthenticationReq_ResourceType AuthenticationReq::IPAD;
const AuthenticationReq_ResourceType AuthenticationReq::ResourceType_MIN;
const AuthenticationReq_ResourceType AuthenticationReq::ResourceType_MAX;
const int AuthenticationReq::ResourceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AuthenticationReq::kJidFieldNumber;
const int AuthenticationReq::kPasswordFieldNumber;
const int AuthenticationReq::kResourceTypeFieldNumber;
const int AuthenticationReq::kResourceNameFieldNumber;
#endif  // !_MSC_VER

AuthenticationReq::AuthenticationReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.AuthenticationReq)
}

void AuthenticationReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  jid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  jid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
}

AuthenticationReq::AuthenticationReq(const AuthenticationReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:core.AuthenticationReq)
}

void AuthenticationReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  jid_ = NULL;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcetype_ = 0;
  resourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticationReq::~AuthenticationReq() {
  // @@protoc_insertion_point(destructor:core.AuthenticationReq)
  SharedDtor();
}

void AuthenticationReq::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (resourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resourcename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete jid_;
  }
}

void AuthenticationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticationReq& AuthenticationReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_core_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
#endif
  return *default_instance_;
}

AuthenticationReq* AuthenticationReq::default_instance_ = NULL;

AuthenticationReq* AuthenticationReq::New() const {
  return new AuthenticationReq;
}

void AuthenticationReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_jid()) {
      if (jid_ != NULL) jid_->::core::Jid::Clear();
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    resourcetype_ = 0;
    if (has_resourcename()) {
      if (resourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resourcename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:core.AuthenticationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .core.Jid jid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resourceType;
        break;
      }

      // optional .core.AuthenticationReq.ResourceType resourceType = 3 [default = WINPC];
      case 3: {
        if (tag == 24) {
         parse_resourceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::core::AuthenticationReq_ResourceType_IsValid(value)) {
            set_resourcetype(static_cast< ::core::AuthenticationReq_ResourceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_resourceName;
        break;
      }

      // optional string resourceName = 4;
      case 4: {
        if (tag == 34) {
         parse_resourceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.AuthenticationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.AuthenticationReq)
  return false;
#undef DO_
}

void AuthenticationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.AuthenticationReq)
  // required .core.Jid jid = 1;
  if (has_jid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->jid(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional .core.AuthenticationReq.ResourceType resourceType = 3 [default = WINPC];
  if (has_resourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->resourcetype(), output);
  }

  // optional string resourceName = 4;
  if (has_resourcename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->resourcename(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:core.AuthenticationReq)
}

int AuthenticationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .core.Jid jid = 1;
    if (has_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jid());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .core.AuthenticationReq.ResourceType resourceType = 3 [default = WINPC];
    if (has_resourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resourcetype());
    }

    // optional string resourceName = 4;
    if (has_resourcename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcename());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticationReq*>(&from));
}

void AuthenticationReq::MergeFrom(const AuthenticationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jid()) {
      mutable_jid()->::core::Jid::MergeFrom(from.jid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_resourcetype()) {
      set_resourcetype(from.resourcetype());
    }
    if (from.has_resourcename()) {
      set_resourcename(from.resourcename());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticationReq::CopyFrom(const AuthenticationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_jid()) {
    if (!this->jid().IsInitialized()) return false;
  }
  return true;
}

void AuthenticationReq::Swap(AuthenticationReq* other) {
  if (other != this) {
    std::swap(jid_, other->jid_);
    std::swap(password_, other->password_);
    std::swap(resourcetype_, other->resourcetype_);
    std::swap(resourcename_, other->resourcename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AuthenticationReq::GetTypeName() const {
  return "core.AuthenticationReq";
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kStatusFieldNumber;
const int Response::kCauseFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:core.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  cause_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:core.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (cause_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cause_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Response& Response::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_core_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
#endif
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_cause()) {
      if (cause_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cause_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:core.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cause;
        break;
      }

      // optional string cause = 2;
      case 2: {
        if (tag == 18) {
         parse_cause:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cause()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.Response)
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional string cause = 2;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cause(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:core.Response)
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string cause = 2;
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cause());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response*>(&from));
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_cause()) {
      set_cause(from.cause());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(cause_, other->cause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Response::GetTypeName() const {
  return "core.Response";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticationResp::kRespFieldNumber;
const int AuthenticationResp::kFullJidFieldNumber;
#endif  // !_MSC_VER

AuthenticationResp::AuthenticationResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.AuthenticationResp)
}

void AuthenticationResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  resp_ = const_cast< ::core::Response*>(
      ::core::Response::internal_default_instance());
#else
  resp_ = const_cast< ::core::Response*>(&::core::Response::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fulljid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  fulljid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
}

AuthenticationResp::AuthenticationResp(const AuthenticationResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:core.AuthenticationResp)
}

void AuthenticationResp::SharedCtor() {
  _cached_size_ = 0;
  resp_ = NULL;
  fulljid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticationResp::~AuthenticationResp() {
  // @@protoc_insertion_point(destructor:core.AuthenticationResp)
  SharedDtor();
}

void AuthenticationResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete resp_;
    delete fulljid_;
  }
}

void AuthenticationResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticationResp& AuthenticationResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_core_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
#endif
  return *default_instance_;
}

AuthenticationResp* AuthenticationResp::default_instance_ = NULL;

AuthenticationResp* AuthenticationResp::New() const {
  return new AuthenticationResp;
}

void AuthenticationResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_resp()) {
      if (resp_ != NULL) resp_->::core::Response::Clear();
    }
    if (has_fulljid()) {
      if (fulljid_ != NULL) fulljid_->::core::Jid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticationResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:core.AuthenticationResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .core.Response resp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fullJid;
        break;
      }

      // optional .core.Jid fullJid = 3;
      case 3: {
        if (tag == 26) {
         parse_fullJid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fulljid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.AuthenticationResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.AuthenticationResp)
  return false;
#undef DO_
}

void AuthenticationResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.AuthenticationResp)
  // required .core.Response resp = 1;
  if (has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->resp(), output);
  }

  // optional .core.Jid fullJid = 3;
  if (has_fulljid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fulljid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:core.AuthenticationResp)
}

int AuthenticationResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .core.Response resp = 1;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resp());
    }

    // optional .core.Jid fullJid = 3;
    if (has_fulljid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fulljid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticationResp*>(&from));
}

void AuthenticationResp::MergeFrom(const AuthenticationResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resp()) {
      mutable_resp()->::core::Response::MergeFrom(from.resp());
    }
    if (from.has_fulljid()) {
      mutable_fulljid()->::core::Jid::MergeFrom(from.fulljid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticationResp::CopyFrom(const AuthenticationResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_resp()) {
    if (!this->resp().IsInitialized()) return false;
  }
  if (has_fulljid()) {
    if (!this->fulljid().IsInitialized()) return false;
  }
  return true;
}

void AuthenticationResp::Swap(AuthenticationResp* other) {
  if (other != this) {
    std::swap(resp_, other->resp_);
    std::swap(fulljid_, other->fulljid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AuthenticationResp::GetTypeName() const {
  return "core.AuthenticationResp";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Heartbeat::Heartbeat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.Heartbeat)
}

void Heartbeat::InitAsDefaultInstance() {
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:core.Heartbeat)
}

void Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:core.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Heartbeat& Heartbeat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_core_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
#endif
  return *default_instance_;
}

Heartbeat* Heartbeat::default_instance_ = NULL;

Heartbeat* Heartbeat::New() const {
  return new Heartbeat;
}

void Heartbeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:core.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:core.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.Heartbeat)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:core.Heartbeat)
}

int Heartbeat::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Heartbeat*>(&from));
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {

  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Heartbeat::GetTypeName() const {
  return "core.Heartbeat";
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatAck::kFromJidFieldNumber;
#endif  // !_MSC_VER

HeartbeatAck::HeartbeatAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.HeartbeatAck)
}

void HeartbeatAck::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fromjid_ = const_cast< ::core::Jid*>(
      ::core::Jid::internal_default_instance());
#else
  fromjid_ = const_cast< ::core::Jid*>(&::core::Jid::default_instance());
#endif
}

HeartbeatAck::HeartbeatAck(const HeartbeatAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:core.HeartbeatAck)
}

void HeartbeatAck::SharedCtor() {
  _cached_size_ = 0;
  fromjid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatAck::~HeartbeatAck() {
  // @@protoc_insertion_point(destructor:core.HeartbeatAck)
  SharedDtor();
}

void HeartbeatAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fromjid_;
  }
}

void HeartbeatAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HeartbeatAck& HeartbeatAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_core_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
#endif
  return *default_instance_;
}

HeartbeatAck* HeartbeatAck::default_instance_ = NULL;

HeartbeatAck* HeartbeatAck::New() const {
  return new HeartbeatAck;
}

void HeartbeatAck::Clear() {
  if (has_fromjid()) {
    if (fromjid_ != NULL) fromjid_->::core::Jid::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool HeartbeatAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:core.HeartbeatAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .core.Jid fromJid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromjid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.HeartbeatAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.HeartbeatAck)
  return false;
#undef DO_
}

void HeartbeatAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.HeartbeatAck)
  // required .core.Jid fromJid = 1;
  if (has_fromjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->fromjid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:core.HeartbeatAck)
}

int HeartbeatAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .core.Jid fromJid = 1;
    if (has_fromjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromjid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HeartbeatAck*>(&from));
}

void HeartbeatAck::MergeFrom(const HeartbeatAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromjid()) {
      mutable_fromjid()->::core::Jid::MergeFrom(from.fromjid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void HeartbeatAck::CopyFrom(const HeartbeatAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fromjid()) {
    if (!this->fromjid().IsInitialized()) return false;
  }
  return true;
}

void HeartbeatAck::Swap(HeartbeatAck* other) {
  if (other != this) {
    std::swap(fromjid_, other->fromjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HeartbeatAck::GetTypeName() const {
  return "core.HeartbeatAck";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core

// @@protoc_insertion_point(global_scope)
