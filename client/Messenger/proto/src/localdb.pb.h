// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localdb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_localdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_localdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 30010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 30010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "im.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_localdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_localdb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace localdb {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class UserProfile;
class UserProfileDefaultTypeInternal;
extern UserProfileDefaultTypeInternal _UserProfile_default_instance_;
}  // namespace localdb
PROTOBUF_NAMESPACE_OPEN
template<> ::localdb::Config* Arena::CreateMaybeMessage<::localdb::Config>(Arena*);
template<> ::localdb::UserProfile* Arena::CreateMaybeMessage<::localdb::UserProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace localdb {

// ===================================================================

class UserProfile :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:localdb.UserProfile) */ {
 public:
  UserProfile();
  virtual ~UserProfile();

  UserProfile(const UserProfile& from);
  UserProfile(UserProfile&& from) noexcept
    : UserProfile() {
    *this = ::std::move(from);
  }

  inline UserProfile& operator=(const UserProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserProfile& operator=(UserProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserProfile* internal_default_instance() {
    return reinterpret_cast<const UserProfile*>(
               &_UserProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserProfile& a, UserProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(UserProfile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserProfile* New() const final {
    return CreateMaybeMessage<UserProfile>(nullptr);
  }

  UserProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserProfile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserProfile& from);
  void MergeFrom(const UserProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localdb.UserProfile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecentContactsFieldNumber = 5,
    kChatMessagesFieldNumber = 6,
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
    kAutoSigninFieldNumber = 3,
    kThemeFieldNumber = 4,
  };
  // repeated string recentContacts = 5;
  int recentcontacts_size() const;
  private:
  int _internal_recentcontacts_size() const;
  public:
  void clear_recentcontacts();
  const std::string& recentcontacts(int index) const;
  std::string* mutable_recentcontacts(int index);
  void set_recentcontacts(int index, const std::string& value);
  void set_recentcontacts(int index, std::string&& value);
  void set_recentcontacts(int index, const char* value);
  void set_recentcontacts(int index, const char* value, size_t size);
  std::string* add_recentcontacts();
  void add_recentcontacts(const std::string& value);
  void add_recentcontacts(std::string&& value);
  void add_recentcontacts(const char* value);
  void add_recentcontacts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& recentcontacts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_recentcontacts();
  private:
  const std::string& _internal_recentcontacts(int index) const;
  std::string* _internal_add_recentcontacts();
  public:

  // repeated .im.ChatMessage chatMessages = 6;
  int chatmessages_size() const;
  private:
  int _internal_chatmessages_size() const;
  public:
  void clear_chatmessages();
  ::im::ChatMessage* mutable_chatmessages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::ChatMessage >*
      mutable_chatmessages();
  private:
  const ::im::ChatMessage& _internal_chatmessages(int index) const;
  ::im::ChatMessage* _internal_add_chatmessages();
  public:
  const ::im::ChatMessage& chatmessages(int index) const;
  ::im::ChatMessage* add_chatmessages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::ChatMessage >&
      chatmessages() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string pw = 2;
  bool has_pw() const;
  private:
  bool _internal_has_pw() const;
  public:
  void clear_pw();
  const std::string& pw() const;
  void set_pw(const std::string& value);
  void set_pw(std::string&& value);
  void set_pw(const char* value);
  void set_pw(const char* value, size_t size);
  std::string* mutable_pw();
  std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // optional bool autoSignin = 3;
  bool has_autosignin() const;
  private:
  bool _internal_has_autosignin() const;
  public:
  void clear_autosignin();
  bool autosignin() const;
  void set_autosignin(bool value);
  private:
  bool _internal_autosignin() const;
  void _internal_set_autosignin(bool value);
  public:

  // optional int32 theme = 4;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  ::PROTOBUF_NAMESPACE_ID::int32 theme() const;
  void set_theme(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_theme() const;
  void _internal_set_theme(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:localdb.UserProfile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> recentcontacts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::ChatMessage > chatmessages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  bool autosignin_;
  ::PROTOBUF_NAMESPACE_ID::int32 theme_;
  friend struct ::TableStruct_localdb_2eproto;
};
// -------------------------------------------------------------------

class Config :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:localdb.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localdb.Config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfilesFieldNumber = 1,
  };
  // repeated .localdb.UserProfile profiles = 1;
  int profiles_size() const;
  private:
  int _internal_profiles_size() const;
  public:
  void clear_profiles();
  ::localdb::UserProfile* mutable_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localdb::UserProfile >*
      mutable_profiles();
  private:
  const ::localdb::UserProfile& _internal_profiles(int index) const;
  ::localdb::UserProfile* _internal_add_profiles();
  public:
  const ::localdb::UserProfile& profiles(int index) const;
  ::localdb::UserProfile* add_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localdb::UserProfile >&
      profiles() const;

  // @@protoc_insertion_point(class_scope:localdb.Config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localdb::UserProfile > profiles_;
  friend struct ::TableStruct_localdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserProfile

// optional string id = 1;
inline bool UserProfile::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserProfile::has_id() const {
  return _internal_has_id();
}
inline void UserProfile::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserProfile::id() const {
  // @@protoc_insertion_point(field_get:localdb.UserProfile.id)
  return _internal_id();
}
inline void UserProfile::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:localdb.UserProfile.id)
}
inline std::string* UserProfile::mutable_id() {
  // @@protoc_insertion_point(field_mutable:localdb.UserProfile.id)
  return _internal_mutable_id();
}
inline const std::string& UserProfile::_internal_id() const {
  return id_.GetNoArena();
}
inline void UserProfile::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserProfile::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:localdb.UserProfile.id)
}
inline void UserProfile::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:localdb.UserProfile.id)
}
inline void UserProfile::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:localdb.UserProfile.id)
}
inline std::string* UserProfile::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserProfile::release_id() {
  // @@protoc_insertion_point(field_release:localdb.UserProfile.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserProfile::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:localdb.UserProfile.id)
}

// optional string pw = 2;
inline bool UserProfile::_internal_has_pw() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserProfile::has_pw() const {
  return _internal_has_pw();
}
inline void UserProfile::clear_pw() {
  pw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserProfile::pw() const {
  // @@protoc_insertion_point(field_get:localdb.UserProfile.pw)
  return _internal_pw();
}
inline void UserProfile::set_pw(const std::string& value) {
  _internal_set_pw(value);
  // @@protoc_insertion_point(field_set:localdb.UserProfile.pw)
}
inline std::string* UserProfile::mutable_pw() {
  // @@protoc_insertion_point(field_mutable:localdb.UserProfile.pw)
  return _internal_mutable_pw();
}
inline const std::string& UserProfile::_internal_pw() const {
  return pw_.GetNoArena();
}
inline void UserProfile::_internal_set_pw(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserProfile::set_pw(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:localdb.UserProfile.pw)
}
inline void UserProfile::set_pw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:localdb.UserProfile.pw)
}
inline void UserProfile::set_pw(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:localdb.UserProfile.pw)
}
inline std::string* UserProfile::_internal_mutable_pw() {
  _has_bits_[0] |= 0x00000002u;
  return pw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserProfile::release_pw() {
  // @@protoc_insertion_point(field_release:localdb.UserProfile.pw)
  if (!has_pw()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pw_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserProfile::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pw);
  // @@protoc_insertion_point(field_set_allocated:localdb.UserProfile.pw)
}

// optional bool autoSignin = 3;
inline bool UserProfile::_internal_has_autosignin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserProfile::has_autosignin() const {
  return _internal_has_autosignin();
}
inline void UserProfile::clear_autosignin() {
  autosignin_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool UserProfile::_internal_autosignin() const {
  return autosignin_;
}
inline bool UserProfile::autosignin() const {
  // @@protoc_insertion_point(field_get:localdb.UserProfile.autoSignin)
  return _internal_autosignin();
}
inline void UserProfile::_internal_set_autosignin(bool value) {
  _has_bits_[0] |= 0x00000004u;
  autosignin_ = value;
}
inline void UserProfile::set_autosignin(bool value) {
  _internal_set_autosignin(value);
  // @@protoc_insertion_point(field_set:localdb.UserProfile.autoSignin)
}

// optional int32 theme = 4;
inline bool UserProfile::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserProfile::has_theme() const {
  return _internal_has_theme();
}
inline void UserProfile::clear_theme() {
  theme_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserProfile::_internal_theme() const {
  return theme_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserProfile::theme() const {
  // @@protoc_insertion_point(field_get:localdb.UserProfile.theme)
  return _internal_theme();
}
inline void UserProfile::_internal_set_theme(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  theme_ = value;
}
inline void UserProfile::set_theme(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_theme(value);
  // @@protoc_insertion_point(field_set:localdb.UserProfile.theme)
}

// repeated string recentContacts = 5;
inline int UserProfile::_internal_recentcontacts_size() const {
  return recentcontacts_.size();
}
inline int UserProfile::recentcontacts_size() const {
  return _internal_recentcontacts_size();
}
inline void UserProfile::clear_recentcontacts() {
  recentcontacts_.Clear();
}
inline std::string* UserProfile::add_recentcontacts() {
  // @@protoc_insertion_point(field_add_mutable:localdb.UserProfile.recentContacts)
  return _internal_add_recentcontacts();
}
inline const std::string& UserProfile::_internal_recentcontacts(int index) const {
  return recentcontacts_.Get(index);
}
inline const std::string& UserProfile::recentcontacts(int index) const {
  // @@protoc_insertion_point(field_get:localdb.UserProfile.recentContacts)
  return _internal_recentcontacts(index);
}
inline std::string* UserProfile::mutable_recentcontacts(int index) {
  // @@protoc_insertion_point(field_mutable:localdb.UserProfile.recentContacts)
  return recentcontacts_.Mutable(index);
}
inline void UserProfile::set_recentcontacts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:localdb.UserProfile.recentContacts)
  recentcontacts_.Mutable(index)->assign(value);
}
inline void UserProfile::set_recentcontacts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:localdb.UserProfile.recentContacts)
  recentcontacts_.Mutable(index)->assign(std::move(value));
}
inline void UserProfile::set_recentcontacts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recentcontacts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:localdb.UserProfile.recentContacts)
}
inline void UserProfile::set_recentcontacts(int index, const char* value, size_t size) {
  recentcontacts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:localdb.UserProfile.recentContacts)
}
inline std::string* UserProfile::_internal_add_recentcontacts() {
  return recentcontacts_.Add();
}
inline void UserProfile::add_recentcontacts(const std::string& value) {
  recentcontacts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:localdb.UserProfile.recentContacts)
}
inline void UserProfile::add_recentcontacts(std::string&& value) {
  recentcontacts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:localdb.UserProfile.recentContacts)
}
inline void UserProfile::add_recentcontacts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recentcontacts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:localdb.UserProfile.recentContacts)
}
inline void UserProfile::add_recentcontacts(const char* value, size_t size) {
  recentcontacts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:localdb.UserProfile.recentContacts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserProfile::recentcontacts() const {
  // @@protoc_insertion_point(field_list:localdb.UserProfile.recentContacts)
  return recentcontacts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserProfile::mutable_recentcontacts() {
  // @@protoc_insertion_point(field_mutable_list:localdb.UserProfile.recentContacts)
  return &recentcontacts_;
}

// repeated .im.ChatMessage chatMessages = 6;
inline int UserProfile::_internal_chatmessages_size() const {
  return chatmessages_.size();
}
inline int UserProfile::chatmessages_size() const {
  return _internal_chatmessages_size();
}
inline ::im::ChatMessage* UserProfile::mutable_chatmessages(int index) {
  // @@protoc_insertion_point(field_mutable:localdb.UserProfile.chatMessages)
  return chatmessages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::ChatMessage >*
UserProfile::mutable_chatmessages() {
  // @@protoc_insertion_point(field_mutable_list:localdb.UserProfile.chatMessages)
  return &chatmessages_;
}
inline const ::im::ChatMessage& UserProfile::_internal_chatmessages(int index) const {
  return chatmessages_.Get(index);
}
inline const ::im::ChatMessage& UserProfile::chatmessages(int index) const {
  // @@protoc_insertion_point(field_get:localdb.UserProfile.chatMessages)
  return _internal_chatmessages(index);
}
inline ::im::ChatMessage* UserProfile::_internal_add_chatmessages() {
  return chatmessages_.Add();
}
inline ::im::ChatMessage* UserProfile::add_chatmessages() {
  // @@protoc_insertion_point(field_add:localdb.UserProfile.chatMessages)
  return _internal_add_chatmessages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::ChatMessage >&
UserProfile::chatmessages() const {
  // @@protoc_insertion_point(field_list:localdb.UserProfile.chatMessages)
  return chatmessages_;
}

// -------------------------------------------------------------------

// Config

// repeated .localdb.UserProfile profiles = 1;
inline int Config::_internal_profiles_size() const {
  return profiles_.size();
}
inline int Config::profiles_size() const {
  return _internal_profiles_size();
}
inline void Config::clear_profiles() {
  profiles_.Clear();
}
inline ::localdb::UserProfile* Config::mutable_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:localdb.Config.profiles)
  return profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localdb::UserProfile >*
Config::mutable_profiles() {
  // @@protoc_insertion_point(field_mutable_list:localdb.Config.profiles)
  return &profiles_;
}
inline const ::localdb::UserProfile& Config::_internal_profiles(int index) const {
  return profiles_.Get(index);
}
inline const ::localdb::UserProfile& Config::profiles(int index) const {
  // @@protoc_insertion_point(field_get:localdb.Config.profiles)
  return _internal_profiles(index);
}
inline ::localdb::UserProfile* Config::_internal_add_profiles() {
  return profiles_.Add();
}
inline ::localdb::UserProfile* Config::add_profiles() {
  // @@protoc_insertion_point(field_add:localdb.Config.profiles)
  return _internal_add_profiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localdb::UserProfile >&
Config::profiles() const {
  // @@protoc_insertion_point(field_list:localdb.Config.profiles)
  return profiles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_localdb_2eproto
